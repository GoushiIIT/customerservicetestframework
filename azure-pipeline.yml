

pool: Test Runner Agent

jobs:
  - job: test_job
    strategy:
      maxParallel: 2
      matrix: 
        Group1:
          groupName: grp1
          cypressScript: 'cypress/e2e/component_tests/consumer**.cy.*'
        Group2:
          groupName: grp2
          cypressScript: 'cypress/e2e/component_tests/order**.cy.*'
    displayName: Run component test suite with 
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install Node.js'
      - task: Npm@1
        displayName: 'Install Environment Dependencies'
        inputs:
          command: 'install'
          verbose: true
      - task: Npm@1
        inputs:
          command: 'install'
          customRegistry: 'useFeed'
          customFeed: 'f23cd59a-4a93-434a-b955-f9b8a7faf876/0fecebda-36ac-4ea9-8d3b-b8fbc9a4884b'
        displayName: 'Install Plugin Dependencies'
      - task: DownloadSecureFile@1
        name: testConfig
        displayName: 'Download Env Cypress Secret File'
        inputs:
          secureFile: "cypress.env.json"
      - script: |
          set -e
          copy /Y $(testConfig.secureFilePath) cypress.env.json
        displayName: 'Move Cypress Secret File to Test Suite Directory'
      - task: DownloadSecureFile@1
        name: pemConfig
        displayName: 'Download Private Key File'
        inputs:
          secureFile: "mykey.pem"
      - script: |
          set -e
          copy /Y $(pemConfig.secureFilePath) mykey.pem
        displayName: 'Move Private Key Secret File to Test Suite Directory'
      - script: |
          set -e
          npx cypress run --browser chrome --spec $(cypressScript)
          npm run posttest
        displayName: "Running Test Suite"
        env:
          # CYPRESS_PROJECT_ID: "rfpuwg"
          CYPRESS_PROCESS_PROFILER_INTERVAL: 60000
          # DEBUG: ${{ parameters.DEBUG }}   
      - script: |
          IF exist test-results (rmdir /s /q test-results) else (echo "Previous test results doesn't exist")
          mkdir test-results
          move cypress/reports test-results/
          if exist cypress/screenshots (move cypress/screenshots test-results/)
          if exist cypress/utils (move cypress/utils test-results/)
          if exist cypress/videos (move cypress/videos test-results/)
          if exist cypress/hars (move cypress/hars test-results/)
          if exist cypress/logs (move cypress/logs test-results/)
        displayName: "Grouping Test Suite Results for Publishing"
      - script:  |
          cd test-results/reports/mocha
          ren *.json  $(groupName)*.*
        displayName: 'Rename mocha'
      - task: PublishPipelineArtifact@1
        name: publishRecording
        condition: succeededOrFailed()
        displayName: 'Publish Test Suite Results'
        inputs:
          targetPath: './test-results'
          artifactName: $(groupName)
  - job: combine
    dependsOn: test_job
    condition: succeededOrFailed()
    displayName: Merge Test Results
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          downloadPath: "$(Pipeline.Workspace)"
      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install Node.js'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Pipeline.Workspace)/grp1'
          TargetFolder: '$(Pipeline.Workspace)/grp2' 
      - script: | 
          npm install mochawesome mochawesome-report-generator mochawesome-merge jq
        displayName: 'Install required dependencies'
      - script: | 
          cd test-results
          npx mochawesome-merge reports/mocha/*.json -o reports/mochareports/report.json 
        workingDirectory: $(Pipeline.Workspace)
        displayName: 'Merge Test Results to report json'
      - script: | 
          cd test-results
          npx marge reports\mochareports\report.json -o reports\mochareports --reportTitle "Component Test Execution - $(Build.BuildNumber)"
        workingDirectory: $(Pipeline.Workspace)
        displayName: 'Merge Test Results to report html'
      - task: PowerShell@2
        displayName: 'Calculate test results and status'
        inputs:
          targetType: 'inline'
          workingDirectory: $(Pipeline.Workspace)
          script: |
            cd test-results
            $TEST_RESULT =$(cat reports/mochareports/report.json | jq '.stats.passPercent')
            $TEST_COUNT =$(cat reports/mochareports/report.json | jq '.stats.tests') 
            
            echo $TEST_RESULT
            echo $TEST_COUNT
                
            if ( $TEST_RESULT -eq  $null ) 
            {
                $TEST_RESULT ="N/A"
                $TEST_STATUS ="N/A"
                $TEST_COUNT ="N/A"
            }
            elseif ($TEST_RESULT -eq 100 ) 
            {
                $TEST_STATUS ="Succeeded"
            }
            else
            {
                $TEST_STATUS ="Failed"
            }
                
            Write-Host "##vso[task.setvariable variable=TEST_RESULT;]$TEST_RESULT"
            Write-Host "##vso[task.setvariable variable=TEST_STATUS;]$TEST_STATUS"
            Write-Host "##vso[task.setvariable variable=TEST_COUNT;]$TEST_COUNT"
      - task: PowerShell@2
        displayName: 'Log the test results'
        inputs:
          targetType: 'inline'
          workingDirectory: $(Pipeline.Workspace)
          script: |
            Write-Host "Set Web to $(TEST_RESULT)"
            Write-Host "Set Web to $(TEST_STATUS)"
            Write-Host "Set Web to $(TEST_COUNT)"
      - task: PublishPipelineArtifact@1
        name: publishRecording
        condition: succeededOrFailed()
        displayName: 'Publish Test Suite Results'
        inputs:
          targetPath: '$(Pipeline.Workspace)/grp2'
          artifactName: 'combined-results'
      - template: "sendnotification.yml"
        parameters:
          PIPELINE_NAME: Component Suite Execution
          TEST_RESULT: $(TEST_RESULT)
          TEST_COUNT: $(TEST_COUNT)
